importer:
  add001_seq:
     package: MARC
     options:
        type: ALEPHSEQ
        fix: seq2m21.fix
  import_seq:
     package: MARC
     options:
        type: ALEPHSEQ
  import_xlsx:
    package: XLSX
    options:
      worksheet: 1 # count from 0..n
      columns: 1
exporter:
  # CSV exporter to produce Aleph sequential format
  seq_csv:
    package: CSV
    options:
      sep_char: " " # simply a space
      quote_char: ""
      escape_char: ""
      header: 0
      # fix to create generic field tag for sequential
      #fix: set_field(TAG,'70012 L')
      # fix to create field tag with value from column C
      fix: paste(TAG,"~949","C","~  L",join_char:"")
      fields: Systemnr.,TAG,B
  short_csv:
    package: CSV
    options:
      escape_char: ""
      fields: SYS,Titel,Datum
      fix: datumsanalyse_csv.fix
      quote_char: ""
      sep_char: ";"
  a332_csv:
    package: CSV
    options:
      collect_fields: "1"
      escape_char: ""
      fields: _id,leader,f007,f008,f028,f090,f240,f245,f246,f264,f300,f500,f505,f511,f100,f700,f710,f773,f920
      fix: create_csv.fix
      quote_char: ""
      sep_char: "\t"
  item_csv:
    package: CSV
    options:
      collect_fields: "1"
      escape_char: ""
      fields: _id,sub-library,collection,barcode,call-no
      fix: create_csv_item.fix
      quote_char: ""
      sep_char: "\t"
  clean_marc_xml:
     package: MARC
     options:
        type: XML
        fix: clean_marc_xml.fix
  a150_920_csv:
    package: CSV
    options:
      collect_fields: 1
      sep_char: |
      fix: export-A150-920er.fix
